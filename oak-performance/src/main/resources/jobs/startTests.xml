<joblist>
  <job>
    <id>0bb7b006-2e47-4927-8d25-fa355835572e</id>
    <loglevel>INFO</loglevel>
    <sequence keepgoing='false' strategy='step-first'>
      <command>
        <scriptargs />
        <script><![CDATA[#!/bin/bash  
 
# Removes the documents from syncOAK, NODES and segments collection 
# Launches the test (@option.TestName@) on each platform 
# The step is executed concurrently on all mongos platforms 
 
export JAVA_HOME=/home/$USER/jdk1.6.0_33/   
export PATH=${JAVA_HOME}bin:$PATH  
export M2=/home/$USER/maven/bin  
export MAVEN_OPTS="-Xmx512m -XX:MaxPermSize=128m"  
export PATH=$PATH:$M2  
  
SHARD1_HOST=ec2-50-112-15-19.us-west-2.compute.amazonaws.com 
SHARD2_HOST=ec2-54-244-69-122.us-west-2.compute.amazonaws.com  
SHARD3_HOST=ec2-50-112-30-14.us-west-2.compute.amazonaws.com  
MONGOS_MAIN_PLATFORM=@option.MONGOS_MAIN_PLATFORM@ 
CONFIG_PORT=20001  
MONGOS_PORT=30000  
MONGOD_PORT=27018  
CURRENT_NODE=@node.hostname@   
MONGOS_MAIN_PLATFORM=@option.MONGOS_MAIN_PLATFORM@  
DATABASE_NAME=mongoTestStorage  
CLUSTER_NODE_ID=${CURRENT_NODE:0:15}  

if [ "$CURRENT_NODE" == "$MONGOS_MAIN_PLATFORM" ]; then  
    # clean collections
    mongo --host $MONGOS_MAIN_PLATFORM $DATABASE_NAME --port $MONGOS_PORT --eval "db.syncOAK.remove()"  
    mongo --host $MONGOS_MAIN_PLATFORM $DATABASE_NAME --port $MONGOS_PORT --eval "db.NODES.remove()"  
    mongo --host $MONGOS_MAIN_PLATFORM $DATABASE_NAME --port $MONGOS_PORT --eval "db.segments.remove()"  
    mongo --host $MONGOS_MAIN_PLATFORM $DATABASE_NAME --port $MONGOS_PORT --eval "db.results.remove()"  
    # start the test on the main mongos platform (workaround for the concurrent oak repositories init)
    mvn -f /home/$USER/jackrabbit-oak/oak-mongomk-perf/pom.xml clean test -Dtest=@option.TestName@ -Dmongos.number=@option.MongosNumber@ -Dcluster.node=$CLUSTER_NODE_ID -Doak.type=@option.OakType@
else
    # wait for the repository to be initialized from the main mongos platform
    sleep 60    
    mvn -f /home/$USER/jackrabbit-oak/oak-mongomk-perf/pom.xml clean test -Dtest=@option.TestName@ -Dmongos.number=@option.MongosNumber@ -Dcluster.node=$CLUSTER_NODE_ID -Doak.type=@option.OakType@
fi
]]></script>
      </command>
      <command>
        <scriptargs />
        <script><![CDATA[#!/bin/bash

# Collects the results from the $DATABASE_NAME
# Builds the RESULT_HTML chart file

MONGOS_NUMBER=3
DATABASE_NAME=mongoTestStorage
COLLECTION_NAME=results
MONGOS_MAIN_PLATFORM=@option.MONGOS_MAIN_PLATFORM@
MONGOS_PORT=30000
RESULT_HTML=results.html
CURRENT_NODE=@node.hostname@

TOTAL_SAVES=`mongo --host $MONGOS_MAIN_PLATFORM $DATABASE_NAME --port $MONGOS_PORT --quiet --eval "var result=db.${COLLECTION_NAME}.count();printjson(result)"`
INSTANCE_SAVES=$((TOTAL_SAVES / MONGOS_NUMBER ))
echo INSTANCE_SAVES=$INSTANCE_SAVES

# Create the js script
rm -f $RESULT_HTML

if [ "$CURRENT_NODE" == "$MONGOS_MAIN_PLATFORM" ]; then
    # Add cols
    echo "<html>
      <head>
        <script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"></script>
        <script type=\"text/javascript\">
          google.load(\"visualization\", \"1\", {packages:[\"corechart\"]});
          google.setOnLoadCallback(drawChart);
          function drawChart() {
          var jsonData = {\"cols\": [
    {\"id\":\"\",\"label\":\"commitNumber\",\"type\":\"string\"}" > $RESULT_HTML

    for (( c=0; c<$MONGOS_NUMBER; c++ ))
    do
        echo ",{\"id\":\"\",\"label\":\"clusterNode${c}\",\"type\":\"number\"}" >> $RESULT_HTML
    done
    echo "],\"rows\": [" >> $RESULT_HTML



    for (( c=0; c<$INSTANCE_SAVES; c++ ))
    do
        VALUE=`mongo --host $MONGOS_MAIN_PLATFORM $DATABASE_NAME --port $MONGOS_PORT --quiet --eval "var result=db.${COLLECTION_NAME}.find({'commitNumber':\"$c\"},{v:1,_id:0}).sort({clusterNodeId:-1}).toArray();printjson(result)"`
        RESULT=$(echo $VALUE | sed -e "s/ / {\"v\":\"$c\"}, /")
        if [ $c -eq 0 ]; then
            RESULT="{\"c\":"${RESULT}"}"
        else
            RESULT=",{\"c\":"${RESULT}"}"
        fi
        echo $RESULT >> $RESULT_HTML   
    done

    # Complete the script

    echo "]};
        var data = new google.visualization.DataTable(jsonData);
        var options = {
              title: 'OAK test results'
            };
         var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
         chart.draw(data, options);
    }
        </script>
      </head>
      <body>
        <div id=\"chart_div\" style=\"width: 1600px; height: 1000px;\"></div>
      </body>
    </html>" >> $RESULT_HTML
fi]]></script>
      </command>
    </sequence>
    <description>Connect to the mongos stations.</description>
    <name>startTests</name>
    <context>
      <project>oakPerformance</project>
      <options>
        <option required='true' name='MONGOS_MAIN_PLATFORM' value='ec2-50-112-90-76.us-west-2.compute.amazonaws.com'>
          <description>The mongos platform from where we configure the cluster shards.</description>
        </option>
        <option required='true' name='MongosNumber' value='3'>
          <description>Number of Concurrent Oaks</description>
        </option>
        <option name='OakType' value='mongomk' />
        <option required='true' name='TestName' value='MongoMKJCRTest#testPyramidStructure'>
          <description>TestClass#testMethod</description>
        </option>
      </options>
    </context>
    <dispatch>
      <threadcount>20</threadcount>
      <keepgoing>false</keepgoing>
      <excludePrecedence>true</excludePrecedence>
      <rankOrder>ascending</rankOrder>
    </dispatch>
    <uuid>0bb7b006-2e47-4927-8d25-fa355835572e</uuid>
    <nodefilters>
      <include>
        <tags>mongodb-10gen</tags>
      </include>
      <exclude>
        <name>i-c01866f2</name>
      </exclude>
    </nodefilters>
  </job>
</joblist>